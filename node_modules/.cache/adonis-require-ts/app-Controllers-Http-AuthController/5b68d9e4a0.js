"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async registerShow({ view }) {
        return view.render('auth/register');
    }
    async register({ request, response, auth }) {
        const userSchema = Validator_1.schema.create({
            username: Validator_1.schema.string({ trim: true }, [Validator_1.rules.unique({ table: 'users', column: 'username', caseInsensitive: true })]),
            email: Validator_1.schema.string({ trim: true }, [Validator_1.rules.email(), Validator_1.rules.unique({ table: 'users', column: 'email', caseInsensitive: true })]),
            password: Validator_1.schema.string({}, [Validator_1.rules.minLength(8)])
        });
        const data = await request.validate({ schema: userSchema });
        const user = await User_1.default.create(data);
        await auth.login(user);
        return response.redirect('/');
    }
    async loginShow({ view }) {
        return view.render('auth/login');
    }
    async login({ request, response, auth, session }) {
        const { uId, password } = request.only(['uId', 'password']);
        try {
            await auth.attempt(uId, password);
        }
        catch (error) {
            session.flash('form', 'Your username, email or password is incorrect');
            return response.redirect().back();
        }
        return response.redirect('/');
    }
    async logout({ response, auth }) {
        await auth.logout();
        return response.redirect().toRoute('auth.login.show');
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDJFQUEwRDtBQUMxRCxpRkFBa0M7QUFFbEMsTUFBcUIsY0FBYztJQUV4QixLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUMsSUFBSSxFQUFzQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBdUI7UUFDakUsTUFBTSxVQUFVLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDN0IsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFDLENBQUMsaUJBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBRTtZQUNuSCxLQUFLLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLEVBQUMsQ0FBQyxpQkFBSyxDQUFDLEtBQUssRUFBRSxFQUFFLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUU7WUFDNUgsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQsQ0FBQyxDQUFBO1FBRUYsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxDQUFDLENBQUE7UUFFekQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXBDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUV0QixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQXNCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBc0I7UUFDdkUsTUFBTSxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUE7UUFFN0QsSUFBSTtZQUNBLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7U0FDcEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLCtDQUErQyxDQUFDLENBQUE7WUFDdEUsT0FBUyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDdEM7UUFFRCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUF1QjtRQUN6RCxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVwQixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0NBQ0Y7QUE1Q0QsaUNBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCB7IHNjaGVtYSwgcnVsZXMgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1ZhbGlkYXRvcidcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aENvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGFzeW5jIHJlZ2lzdGVyU2hvdyh7dmlld306IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgcmV0dXJuIHZpZXcucmVuZGVyKCdhdXRoL3JlZ2lzdGVyJylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXIoe3JlcXVlc3QsIHJlc3BvbnNlLCBhdXRofSA6IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuICAgICAgICBjb25zdCB1c2VyU2NoZW1hID0gc2NoZW1hLmNyZWF0ZSh7XG4gICAgICAgICAgICB1c2VybmFtZTogc2NoZW1hLnN0cmluZyh7dHJpbTogdHJ1ZX0sW3J1bGVzLnVuaXF1ZSh7dGFibGU6ICd1c2VycycsIGNvbHVtbjogJ3VzZXJuYW1lJywgY2FzZUluc2Vuc2l0aXZlOiB0cnVlIH0pXSApLFxuICAgICAgICAgICAgZW1haWw6IHNjaGVtYS5zdHJpbmcoe3RyaW06IHRydWV9LFtydWxlcy5lbWFpbCgpLCBydWxlcy51bmlxdWUoe3RhYmxlOiAndXNlcnMnLCBjb2x1bW46ICdlbWFpbCcsIGNhc2VJbnNlbnNpdGl2ZTogdHJ1ZSB9KV0gKSxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBzY2hlbWEuc3RyaW5nKHt9LCBbcnVsZXMubWluTGVuZ3RoKDgpXSlcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZSh7c2NoZW1hOiB1c2VyU2NoZW1hfSlcblxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5jcmVhdGUoZGF0YSlcblxuICAgICAgICBhd2FpdCBhdXRoLmxvZ2luKHVzZXIpXG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCcvJylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9naW5TaG93KHt2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICByZXR1cm4gdmlldy5yZW5kZXIoJ2F1dGgvbG9naW4nKVxuICAgIH1cblxuICAgIHB1YmxpYyAgYXN5bmMgbG9naW4oe3JlcXVlc3QsIHJlc3BvbnNlLCBhdXRoLCBzZXNzaW9ufTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBjb25zdCB7dUlkLCBwYXNzd29yZH0gPSByZXF1ZXN0Lm9ubHkoWyd1SWQnLCAncGFzc3dvcmQnXSlcblxuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGF1dGguYXR0ZW1wdCh1SWQsIHBhc3N3b3JkKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlc3Npb24uZmxhc2goJ2Zvcm0nLCAnWW91ciB1c2VybmFtZSwgZW1haWwgb3IgcGFzc3dvcmQgaXMgaW5jb3JyZWN0JylcbiAgICAgICAgcmV0dXJuICAgcmVzcG9uc2UucmVkaXJlY3QoKS5iYWNrKClcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoJy8nKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGxvZ291dCh7IHJlc3BvbnNlLCBhdXRoIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBhd2FpdCBhdXRoLmxvZ291dCgpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgnYXV0aC5sb2dpbi5zaG93JylcbiAgfVxufVxuIl19